/* ========== 全体の基本設定 ========== */
body {
    margin: 0;
    font-family: "Helvetica Neue", Arial, sans-serif;
    color: #333;
    background-color: #fff;
    transition: background 0.5s, color 0.5s;
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 40px;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    position: fixed;
    width: 100%;
    z-index: 1000;
}

.nav-left {
    font-size: 1.4em;
    font-weight: bold;
    color: #222;
}

.nav-links a {
    margin: 0 15px;
    text-decoration: none;
    color: #666;
    transition: color 0.3s;
}

.nav-links a.active,
.nav-links a:hover {
    color: #ffcc00;
}

/* ========== Hero Section ========== */
.hero-section {
    height: 100vh;
    background: url("pictures/hero.jpg") center/cover no-repeat fixed;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
}

.hero-overlay {
    background: rgba(0, 0, 0, 0.4);
    color: white;
    text-align: center;
    padding: 60px;
    border-radius: 20px;
}

.hero-title {
    font-size: 4em;
    font-weight: bold;
    letter-spacing: 4px;
}

.hero-subtitle {
    font-size: 1.5em;
    color: #ffcc00;
}

/* ========== コメントセクション ========== */
.comment-section {
    padding: 80px 20px;
    max-width: 800px;
    margin: 0 auto;
    text-align: center;
}

.comment-section h2 {
    margin-bottom: 20px;
}

#comment-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

#comment-form input,
#comment-form textarea {
    padding: 10px;
    border-radius: 6px;
    border: 1px solid #ccc;
    font-size: 1em;
}

#comment-form button {
    background-color: #ffcc00;
    border: none;
    color: #000;
    font-weight: bold;
    padding: 10px;
    cursor: pointer;
    border-radius: 6px;
    transition: background 0.3s;
}

#comment-form button:hover {
    background-color: #ffdd33;
}

#comment-list {
    margin-top: 30px;
    list-style: none;
    padding: 0;
}

#comment-list li {
    background: #f9f9f9;
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 5px;
}

/* ========== フッター ========== */
footer {
    text-align: center;
    padding: 20px;
    color: #888;
}

/* ========== ダークモード全体 ========== */
body.dark {
    background-color: #121212;
    color: #eee;
}

body.dark nav {
    background: rgba(20, 20, 20, 0.9);
}

body.dark .hero-overlay {
    background: rgba(0, 0, 0, 0.6);
}

body.dark #comment-form input,
body.dark #comment-form textarea {
    background: #333;
    color: #eee;
    border: 1px solid #555;
}

body.dark #comment-form button {
    background-color: #ffcc00;
    color: #000;
}

body.dark #comment-list li {
    background: #1e1e1e;
}

/* ========== あなた提供のスイッチCSS完全版 ========== */
.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
}

.switch #input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #2196f3;
    transition: 0.4s;
    z-index: 0;
    overflow: hidden;
}

.sun-moon {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: yellow;
    transition: 0.4s;
}

#input:checked+.slider {
    background-color: black;
}

#input:focus+.slider {
    box-shadow: 0 0 1px #2196f3;
}

#input:checked+.slider .sun-moon {
    transform: translateX(26px);
    background-color: white;
    animation: rotate-center 0.6s ease-in-out both;
}

.moon-dot {
    opacity: 0;
    transition: 0.4s;
    fill: gray;
}

#input:checked+.slider .sun-moon .moon-dot {
    opacity: 1;
}

.slider.round {
    border-radius: 34px;
}

.slider.round .sun-moon {
    border-radius: 50%;
}

/* ===== 月のドット位置 ===== */
#moon-dot-1 {
    left: 10px;
    top: 3px;
    position: absolute;
    width: 6px;
    height: 6px;
    z-index: 4;
}

#moon-dot-2 {
    left: 2px;
    top: 10px;
    position: absolute;
    width: 10px;
    height: 10px;
    z-index: 4;
}

#moon-dot-3 {
    left: 16px;
    top: 18px;
    position: absolute;
    width: 3px;
    height: 3px;
    z-index: 4;
}

/* ===== 光の輪 ===== */
#light-ray-1 {
    left: -8px;
    top: -8px;
    position: absolute;
    width: 43px;
    height: 43px;
    z-index: -1;
    fill: white;
    opacity: 10%;
}

#light-ray-2 {
    left: -50%;
    top: -50%;
    position: absolute;
    width: 55px;
    height: 55px;
    z-index: -1;
    fill: white;
    opacity: 10%;
}

#light-ray-3 {
    left: -18px;
    top: -18px;
    position: absolute;
    width: 60px;
    height: 60px;
    z-index: -1;
    fill: white;
    opacity: 10%;
}

/* ===== 雲のアニメーション ===== */
.cloud-light {
    position: absolute;
    fill: #eee;
    animation-name: cloud-move;
    animation-duration: 6s;
    animation-iteration-count: infinite;
}

.cloud-dark {
    position: absolute;
    fill: #ccc;
    animation-name: cloud-move;
    animation-duration: 6s;
    animation-iteration-count: infinite;
    animation-delay: 1s;
}

#cloud-1 {
    left: 30px;
    top: 15px;
    width: 40px;
}

#cloud-2 {
    left: 44px;
    top: 10px;
    width: 20px;
}

#cloud-3 {
    left: 18px;
    top: 24px;
    width: 30px;
}

#cloud-4 {
    left: 36px;
    top: 18px;
    width: 40px;
}

#cloud-5 {
    left: 48px;
    top: 14px;
    width: 20px;
}

#cloud-6 {
    left: 22px;
    top: 26px;
    width: 30px;
}

@keyframes cloud-move {
    0% {
        transform: translateX(0px);
    }

    40% {
        transform: translateX(4px);
    }

    80% {
        transform: translateX(-4px);
    }

    100% {
        transform: translateX(0px);
    }
}

/* ===== 星のアニメーション ===== */
.stars {
    transform: translateY(-32px);
    opacity: 0;
    transition: 0.4s;
}

.star {
    fill: white;
    position: absolute;
    transition: 0.4s;
    animation-name: star-twinkle;
    animation-duration: 2s;
    animation-iteration-count: infinite;
}

#input:checked+.slider .stars {
    transform: translateY(0);
    opacity: 1;
}

#star-1 {
    width: 20px;
    top: 2px;
    left: 3px;
    animation-delay: 0.3s;
}

#star-2 {
    width: 6px;
    top: 16px;
    left: 3px;
}

#star-3 {
    width: 12px;
    top: 20px;
    left: 10px;
    animation-delay: 0.6s;
}

#star-4 {
    width: 18px;
    top: 0px;
    left: 18px;
    animation-delay: 1.3s;
}

@keyframes star-twinkle {
    0% {
        transform: scale(1);
    }

    40% {
        transform: scale(1.2);
    }

    80% {
        transform: scale(0.8);
    }

    100% {
        transform: scale(1);
    }
}

@keyframes rotate-center {
    0% {
        transform: rotate(0);
    }

    100% {
        transform: rotate(360deg);
    }
}

/* ===== Heroセクションの改良 ===== */
.hero-section {
    height: 100vh;
    background: url("https://images.unsplash.com/photo-1498050108023-c5249f4df085?auto=format&fit=crop&w=1920&q=80") center/cover no-repeat fixed;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    overflow: hidden;
}

.hero-overlay {
    background: rgba(0, 0, 0, 0.55);
    padding: 60px;
    border-radius: 20px;
    color: white;
    text-align: center;
    animation: fadeIn 2s ease-in-out forwards;
}

.hero-title {
    font-size: 4em;
    letter-spacing: 2px;
    animation: slideInUp 1.8s ease-out;
}

.hero-subtitle {
    font-size: 1.4em;
    color: #ffcc00;
    animation: fadeIn 3s ease-in;
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}

@keyframes slideInUp {
    from {
        transform: translateY(40px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }
}

/* ===== 自己紹介セクション ===== */
.about-section {
    background: #f8f8f8;
    color: #333;
    padding: 80px 20px;
    text-align: center;
}

.about-container {
    max-width: 900px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 40px;
    flex-wrap: wrap;
}

.about-photo {
    width: 220px;
    height: 220px;
    border-radius: 50%;
    object-fit: cover;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

.about-text {
    max-width: 500px;
    text-align: left;
}

.about-text h3 {
    color: #ffcc00;
    font-size: 1.6em;
}

/* ===============================
   基本構成
================================= */
body {
    margin: 0;
    font-family: "Noto Sans JP", sans-serif;
    color: #333;
    background-color: #fff;
}

nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 60px;
    background: rgba(255, 255, 255, 0.9);
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 999;
    backdrop-filter: blur(10px);
}

.nav-left {
    font-size: 1.5em;
    font-weight: bold;
    color: #ffcc00;
}

.nav-links a {
    margin-left: 20px;
    text-decoration: none;
    color: #555;
    font-weight: 500;
    transition: color 0.3s ease;
}

.nav-links a:hover {
    color: #ffcc00;
}

/* ===============================
   Heroセクション
================================= */
.hero-section {
    height: 100vh;
    background: url("pictures/hero.jpg") center/cover no-repeat fixed;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
}

.hero-overlay {
    background: rgba(0, 0, 0, 0.55);
    padding: 60px;
    border-radius: 20px;
    color: white;
    text-align: center;
    animation: fadeIn 2s ease-in-out forwards;
}

.hero-title {
    font-size: 4em;
    letter-spacing: 2px;
    animation: slideInUp 1.8s ease-out;
}

.hero-subtitle {
    font-size: 1.4em;
    color: #ffcc00;
    animation: fadeIn 3s ease-in;
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}

@keyframes slideInUp {
    from {
        transform: translateY(40px);
        opacity: 0;
    }

    to {
        transform: translateY(0);
        opacity: 1;
    }
}

/* ===============================
   コメントフォーム
================================= */
.comment-section {
    padding: 100px 20px;
    background: #fafafa;
    text-align: center;
}

.comment-section h2 {
    font-size: 2em;
    color: #333;
    margin-bottom: 40px;
}

/* 入力デザイン */
.inputContainer {
    position: relative;
    margin-bottom: 20px;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
}

.customInput {
    width: 100%;
    padding: 12px;
    font-size: 16px;
    background-color: transparent;
    border: none;
    border-bottom: 2px solid #007bff;
    outline: none;
    transition: border-color 0.3s ease;
    color: #007bff;
}

.customInput:focus,
.customInput:not(:placeholder-shown) {
    border-color: #0056b3;
}

.inputLabel {
    position: absolute;
    top: 0;
    left: 0;
    pointer-events: none;
    padding: 5px;
    font-size: 16px;
    color: #007bff;
    transition: transform 0.3s ease, color 0.3s ease;
}

.customInput:focus+.inputLabel,
.customInput:not(:placeholder-shown)+.inputLabel {
    transform: translateY(-100%) translateX(-5px) scale(0.8);
}

.inputUnderline {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: #007bff;
}

.submit-btn {
    background-color: #ffcc00;
    border: none;
    padding: 10px 30px;
    color: #333;
    font-weight: bold;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s;
}

.submit-btn:hover {
    background-color: #ffd633;
}

/* ===============================
   自己紹介
================================= */
.about-section {
    background: #f8f8f8;
    color: #333;
    padding: 80px 20px;
    text-align: center;
}

.about-container {
    max-width: 900px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 40px;
    flex-wrap: wrap;
}

.about-photo {
    width: 220px;
    height: 220px;
    border-radius: 50%;
    object-fit: cover;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

.about-text {
    max-width: 500px;
    text-align: left;
}

.about-text h3 {
    color: #ffcc00;
    font-size: 1.6em;
}

/* ===============================
   ナイトモードスイッチ（完全収録）
================================= */
/* あなたの提示コードをそのまま全収録 */

// script.js
document.addEventListener('DOMContentLoaded', ()=> {
        // 要素参照（id 前提）
        const commentForm=document.getElementById('comment-form');
        const commentList=document.getElementById('comment-list');
        const nameInput=document.getElementById('name');
        const commentInput=document.getElementById('comment');
        const darkToggle=document.getElementById('input');
        const hero=document.querySelector('.hero-section');

        // --- helper ---
        const safeJSON=txt=> {
            try {
                return JSON.parse(txt);
            }

            catch {
                return null;
            }
        }

        ;

        // placeholder 空文字を付けて CSS の :placeholder-shown 挙動を使えるようにする
        [nameInput, commentInput].forEach(inp=> {
                if (inp && !inp.hasAttribute('placeholder')) inp.setAttribute('placeholder', ' ');
            });

        // --- コメント表示 ---
        function renderComments(arr) {
            if ( !Array.isArray(arr)) arr=[];

            // ソート: 作成日時があれば新しい順（新しいが上）にする
            arr.sort((a, b)=> {
                    const ta=a.createdAt ? new Date(a.createdAt).getTime() : 0;
                    const tb=b.createdAt ? new Date(b.createdAt).getTime() : 0;
                    return tb - ta;
                });

            commentList.innerHTML='';

            if (arr.length===0) {
                commentList.innerHTML='<li class="comment-item">まだコメントはありません。</li>';
                return;
            }

            arr.forEach(c=> {
                    const li=document.createElement('li');
                    li.className='comment-item';
                    const time=c.createdAt ? (new Date(c.createdAt)).toLocaleString() : '';

                    li.innerHTML=`<div class="comment-meta" >$ {
                        escapeHtml(c.name || '名無し')
                    }

                    $ {
                        time ? '・ ' + escapeHtml(time) : ''
                    }

                    </div> <div class="comment-body" >$ {
                        escapeHtml(c.comment || '')
                    }

                    </div>`;
                    commentList.appendChild(li);
                });
        }

        function escapeHtml(s) {
            if ( !s) return '';
            return String(s) .replaceAll('&', '&amp;') .replaceAll('<', '&lt;') .replaceAll('>', '&gt;') .replaceAll('"', '&quot;') .replaceAll("'", '&#39;');
        }

        // --- サーバからロード、フォールバック to localStorage ---
        async function loadComments() {
            try {
                const res=await fetch('/.netlify/functions/getComments');
                if ( !res.ok) throw new Error('getComments failed: ' + res.status);
                const data=await res.json();
                renderComments(data);

                // ローカルにコピーしてフォールバック用
                try {
                    localStorage.setItem('comments', JSON.stringify(data));
                }

                catch {}
            }

            catch (err) {
                console.warn('getComments error, using localStorage', err);
                const local=safeJSON(localStorage.getItem('comments')) || [];
                renderComments(local);
            }
        }

        // --- 送信処理 ---
        commentForm && commentForm.addEventListener('submit', async (e)=> {
                e.preventDefault();
                const name=(nameInput && nameInput.value || '').trim() || '名無し';
                const comment=(commentInput && commentInput.value || '').trim();

                if ( !comment) {
                    alert('コメントを入力してください。');
                    return;
                }

                const payload= {
                    name, comment, createdAt: new Date().toISOString()
                }

                ;

                // optimistic: ローカルに追加（表示の即時反映）
                try {
                    const current=safeJSON(localStorage.getItem('comments')) || [];
                    current.unshift(payload);
                    localStorage.setItem('comments', JSON.stringify(current));
                }

                catch {}

                // try server
                try {
                    const res=await fetch('/.netlify/functions/addComment', {

                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }

                        ,
                        body: JSON.stringify(payload)
                    });
                if ( !res.ok) throw new Error('addComment failed: ' + res.status);
                // 成功したら再読み込み（確実に整列）
                await loadComments();
            }

            catch (err) {
                console.warn('addComment failed, saved locally', err);
                // 既に保存済みローカルを表示
                const local=safeJSON(localStorage.getItem('comments')) || [];
                renderComments(local);
            }

            commentForm.reset();

            // placeholder trick のために空白を再設定（ラベル挙動を安定）
            [nameInput, commentInput].forEach(i=> {
                    if (i) i.setAttribute('placeholder', ' ');
                });
        });

    // --- ダークモードトグル ---
    try {
        const savedTheme=localStorage.getItem('theme');

        if (savedTheme==='dark') {
            document.body.classList.add('dark');
            if (darkToggle) darkToggle.checked=true;
        }

        else {
            if (darkToggle) darkToggle.checked=false;
        }
    }

    catch {}

    if (darkToggle) {
        darkToggle.addEventListener('change', ()=> {
                const on= ! !darkToggle.checked;
                document.body.classList.toggle('dark', on);

                try {
                    localStorage.setItem('theme', on ? 'dark' : 'light');
                }

                catch {}
            });
    }

    // --- Hero パララックス（軽い効果） ---
    if (hero) {

        // 初期
        const setHero=()=> {
            const sc=window.scrollY;

            // 背景位置を少し動かす（縦方向）
            hero.style.backgroundPosition=`center $ {
                -sc * 0.2
            }

            px`;
            // overlay パララックス（スケールごく僅か）
            const overlay=hero.querySelector('.hero-overlay');

            if (overlay) {
                const scale=1 + Math.min(sc / 2000, 0.03);

                overlay.style.transform=`translateY($ {
                        Math.min(sc / 10, 40)
                    }

                    px) scale($ {
                        scale
                    })`;
            }
        }

        ;
        setHero();

        window.addEventListener('scroll', ()=> {
                requestAnimationFrame(setHero);
            }

            , {
            passive: true
        });
    window.addEventListener('resize', ()=> requestAnimationFrame(setHero));
}

// --- 初回ロード ---
loadComments();
});